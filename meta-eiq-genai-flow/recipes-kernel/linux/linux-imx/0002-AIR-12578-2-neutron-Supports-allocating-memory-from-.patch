From 9ee402a524cbd56875ab65e3ffe6ff50e31cfc1a Mon Sep 17 00:00:00 2001
From: "Jiwei.Fu" <jiwei.fu@nxp.com>
Date: Fri, 14 Feb 2025 16:08:52 +0800
Subject: [PATCH 2/4] AIR-12578-2 neutron: Supports allocating memory from
 specific memory pool

In some cases, Neutron needs to allocate large size DDR memory to run LLM
(large language model) models, but the default dma pool cannot meet the
memory requirements. Add support for allocating memory from user-specified
memory pools to meet more flexible user needs.

Upstream-Status: Pending

Signed-off-by: Jiwei.Fu <jiwei.fu@nxp.com>
Reviewed-by: Forrest Shi <xuelin.shi@nxp.com>
---
 drivers/staging/neutron/neutron_device.h |  2 ++
 drivers/staging/neutron/neutron_driver.c | 15 ++++++++++++++-
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/drivers/staging/neutron/neutron_device.h b/drivers/staging/neutron/neutron_device.h
index 16da4119c579..76401e69ebc8 100644
--- a/drivers/staging/neutron/neutron_device.h
+++ b/drivers/staging/neutron/neutron_device.h
@@ -66,6 +66,7 @@
 // Power status
 #define NEUTRON_POWER_OFF    0
 #define NEUTRON_POWER_ON     1
+#define SPECIFIC_DMA_POOL      BIT(0)
 
 // Suspend delay time in millisecond
 #define NEUTRON_AUTOSUSPEND_DELAY 10000
@@ -114,6 +115,7 @@ struct neutron_device {
 	dev_t                          devt;
 	unsigned int                   power_state;
 	u32                            firmw_id;
+	u32                            flags;
 };
 
 int neutron_dev_init(struct neutron_device *ndev,
diff --git a/drivers/staging/neutron/neutron_driver.c b/drivers/staging/neutron/neutron_driver.c
index a5363c9e7199..c12545ced433 100644
--- a/drivers/staging/neutron/neutron_driver.c
+++ b/drivers/staging/neutron/neutron_driver.c
@@ -12,6 +12,7 @@
 #include <linux/io.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
+#include <linux/of_reserved_mem.h>
 #include <linux/platform_device.h>
 #include <linux/clk.h>
 #include <linux/delay.h>
@@ -77,17 +78,27 @@ static int neutron_pdev_probe(struct platform_device *pdev)
 		goto err_put_pm;
 	}
 
+	if (of_reserved_mem_device_init(&pdev->dev)) {
+		dev_dbg(&pdev->dev, "doesn't have specific DMA pool.\n");
+		ndev->flags &= (~SPECIFIC_DMA_POOL);
+	} else {
+		ndev->flags |= SPECIFIC_DMA_POOL;
+	}
+
 	/* Initialize device */
 	ret = neutron_dev_init(ndev, &pdev->dev, irq, neutron_class,
 			       MKDEV(MAJOR(devt), minor));
 	if (ret)
-		goto err_put_pm;
+		goto of_release_mem;
 
 	pm_runtime_put_autosuspend(&pdev->dev);
 	set_bit(minor, minors);
 
 	return 0;
 
+of_release_mem:
+	if (ndev->flags & SPECIFIC_DMA_POOL)
+		of_reserved_mem_device_release(&pdev->dev);
 err_put_pm:
 	pm_runtime_disable(&pdev->dev);
 err_free_dev:
@@ -101,6 +112,8 @@ static void neutron_pdev_remove(struct platform_device *pdev)
 	struct neutron_device *ndev = platform_get_drvdata(pdev);
 
 	neutron_rproc_shutdown(ndev);
+	if (ndev->flags & SPECIFIC_DMA_POOL)
+		of_reserved_mem_device_release(&pdev->dev);
 	clear_bit(MINOR(ndev->devt), minors);
 	neutron_dev_deinit(ndev);
 	pm_runtime_disable(ndev->dev);
-- 
2.34.1

