# Copyright 2024-2025 NXP
# NXP Proprietary.
# This software is owned or controlled by NXP and may only be used strictly in
# accordance with the applicable license terms. By expressly accepting such
# terms or by downloading, installing, activating and/or otherwise using the
# software, you are agreeing that you have read, and that you agree to comply
# with and are bound by, such license terms. If you do not agree to be bound
# by the applicable license terms, then you may not retain, install, activate
# or otherwise use the software.

import typer
import os
from rag.retrieval import Retriever


def main():
    app = typer.Typer(
        name="Retriever",
        no_args_is_help=True,
        add_completion=False,
        context_settings={"help_option_names": ["-h", "--help"]},
    )

    src_dir_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    @app.command()
    def parse_args(
        top_k: int = typer.Option(
            3,
            "--top-k", "-t",
            help="Number of most relevant chunks pre-selected from the database before reranking. "
                 "(eIQ GenAI Flow uses 3)",
        ),
        no_reranking: bool = typer.Option(
            False,
            "--no-reranking", "-r",
            help="Disable reranking of retrieved chunks to improve relevance. Reranking is only useful if the chunks "
                 "were generated by HiRAG method. (eIQ GenAI Flow uses True)",
        ),
        best_k: int = typer.Option(
            1,
            "--best-k", "-b",
            help="Number of top-ranked chunks included in the LLM prompt after reranking. "
                 "(eIQ GenAI Flow uses 1)",
        ),
        rag_db_name: str = typer.Option(
            "rag_database.pkl",
            "--rag-database", "-d",
            help=f"RAG database file name in data{os.sep}.",
        ),
        verbose: bool = typer.Option(
            False,
            "--verbose", "-v",
            help="Show more information.",
        ),
    ):
        """
        Retrieve chunk(s) from RAG database.
        """

        rag_db_path = os.path.join(src_dir_path, "data", rag_db_name)

        retriever = Retriever(top_k=top_k,
                              reranking=(not no_reranking),
                              best_k=best_k,
                              rag_db_path=rag_db_path,
                              verbose=verbose)

        # contextual information is retrieved based on the user query
        while True:
            # Ask the user for a question
            user_input = input("Ask a question (or type 'q' to quit): ")

            # Check if the user pressed only Enter (empty input)
            if user_input == '':
                continue  # Do nothing and continue the loop

            # Check if the user wants to quit
            if user_input == 'q':
                print("Exiting the program.")
                break

            best_chunk_list, _, _ = retriever(query=user_input)

            if not verbose:
                print(best_chunk_list[0])

    app()


if __name__ == '__main__':
    main()
